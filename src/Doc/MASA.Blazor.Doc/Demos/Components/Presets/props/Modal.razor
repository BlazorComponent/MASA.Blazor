@using System.ComponentModel.DataAnnotations
<div>
    <MButton OnClick="() => _addModal.Show()" Class="mb-1">Open Modal</MButton>

    <MASA.Blazor.Presets.Modal Visible="_addModal.Visible" Title="新增用户" Width="500" ScrollToTopOnHide OnOk="HandleOnClick" OnCancel="HandleOnCancel">
        <p>@System.Text.Json.JsonSerializer.Serialize(_addModal.Data)</p>

        <MRow>
            <MCol Span="12">
                <MTextField @bind-Value="_addModal.Data.UserName" Label="UserName" Dense Outlined />
            </MCol>
            <MCol Span="12">
                <MTextField @bind-Value="_addModal.Data.City" Label="City" Dense Outlined />
            </MCol>
            <MCol Span="12">
                <MRadioGroup @bind-Value="_addModal.Data.Gender" Row Dense Style="margin-top: 0">
                    <MRadio Label="男" Value="0"></MRadio>
                    <MRadio Label="女" Value="1"></MRadio>
                </MRadioGroup>
            </MCol>
            <MCol>
                <MSelect @bind-Value="_addModal.Data.GFs" Multiple Items="_gfs" ItemValue="r=>r" ItemText="r=>r"></MSelect>
            </MCol>
            <MCol>
                <MAutocomplete @bind-Value="_addModal.Data.Favorites" Multiple Items="_favorites" ItemValue="r=>r" ItemText="r=>r"></MAutocomplete>
            </MCol>
        </MRow>
    </MASA.Blazor.Presets.Modal>

    <MRow>
        <MCol>username: @_user.UserName</MCol>
        <MCol>city: @_user.City</MCol>
        <MCol>gender: @_user.Gender</MCol>
        <MCol>girls: @string.Join(",",_user.GFs)</MCol>
        <MCol>favorites: @string.Join(",", _user.Favorites)</MCol>
        <MCol><MButton OnClick="() => _addModal.Show(_user.ShallowCopy())" Color="primary" Text Small>Edit</MButton></MCol>
    </MRow>
</div>

@code {
    private User _user = new()
    {
        UserName = "capdiem",
        City = "HangZhou",
        Gender = 0,
    };

    private List<string> _favorites = new List<string>() { "A", "B", "C", "D" };
    private List<string> _gfs = new List<string> { "Girl 1", "Girl 2", "Girl 3" };

    private DataModal<User> _addModal = new();

    private void HandleOnCancel()
    {
        _addModal.Hide();
    }

    private async Task HandleOnClick()
    {
        _addModal.ShowLoading();

        if (_addModal.HasValue)
        {
            // Update
        }
        else
        {
            // Add
        }
        await Task.Delay(1000);

        _addModal.HideLoading();

        _addModal.Hide();
    }

    public class User : IShallowCopy<User>
    {
        public string UserName { get; set; }
        public int Gender { get; set; }
        public string City { get; set; }
        public List<string> Favorites { get; set; } = new List<string> { };
        public List<string> GFs { get; set; } = new List<string> { };

        public User ShallowCopy()
        {
            var user = (User)this.MemberwiseClone();
            user.GFs = GFs;
            user.Favorites = Favorites;
            return user;
        }
    }

    public class DataModal<T> where T : class, new()
    {
        public bool Visible { get; set; }

        public T Data { get; private set; }

        public bool HasValue { get; private set; }

        public bool Loading { get; private set; }

        public DataModal()
        {
            Data = new T();
        }

        public void Show() => Visible = true;

        /// <summary>
        /// 显示弹窗
        /// </summary>
        /// <param name="data"></param>
        /// <remarks>写入数据之前请确保此对象是拷贝过的</remarks>
        public void Show(T data)
        {
            Visible = true;
            HasValue = true;
            Data = data;
        }

        public virtual void Hide()
        {
            Visible = false;
            HasValue = false;
            Data = new T();
        }

        public bool ShowLoading() => Loading = true;

        public bool HideLoading() => Loading = false;
    }

    public interface IShallowCopy<T>
    {
        public T ShallowCopy();
    }
}