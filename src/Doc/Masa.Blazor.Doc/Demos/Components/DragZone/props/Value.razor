<style>
    .value-item {
        margin: 5px;
        padding: 0.75rem 1.25rem;
        margin-bottom: -1px;
        border: 1px solid rgba(0,0,0,.125);
    }
</style>

<MButton OnClick=AddData>Add</MButton>
<MButton OnClick=Reverse>Reverse</MButton>

<MDragZone OnConfigure=SetOptions @ref=container>
    <MDragItem>
        <MCard Class="value-item">
            <MCardTitle>item1</MCardTitle>
            <MCardText>item content1</MCardText>
        </MCard>
    </MDragItem>
    <MDragItem>
        <MCard Class="value-item">
            <MCardTitle>item2</MCardTitle>
            <MCardText>item content2</MCardText>
        </MCard>
    </MDragItem>
</MDragZone>

@code {
    private MDragZone container;
    private int total = 1;

    private void SetOptions(SorttableOptions options)
    {
        options.Group = "group_oninit";
    }

    private void AddData()
    {
        int count = 1, i= 1;
        var list = new List<MDragItem>();
        do
        {
            list.Add(new MDragItem
                {
                    Id = Guid.NewGuid().ToString(),
                    DragZone = container,
                    ChildContent = CreateCard(container, "-", total++)
                });
                i++;
        }
        while (count - i > 0);
        if (list.Any())
            container.AddRange(list);
    }

    private void Reverse()
    {
        container.Value.Reverse();
    }
    

    private RenderFragment CreateCard(MDragZone container, string split, int index) => builder =>
         {
             int i = 0;
             builder.OpenComponent<MCard>(i++);
             builder.AddAttribute(i++, "IsDark", container.IsDark);
             builder.AddAttribute(i++, "Class", "item");
             builder.AddAttribute(i++, "ChildContent", CreateComponent("-", index));
             builder.CloseComponent();
         };

    private RenderFragment CreateComponent(string split, int index) => builder =>
        {
            int i = 0;
            builder.OpenComponent<MCardTitle>(i++);
            builder.AddAttribute(i++, "ChildContent", CreateText($"item title {split}{index}"));
            builder.CloseComponent();

            builder.OpenComponent<MCardText>(i++);
            builder.AddAttribute(i++, "ChildContent", CreateText($"item content {split}{index}"));
            builder.CloseComponent();
        };

    private RenderFragment CreateText(string name) => builder =>
        {
            builder.AddContent(0, $"{name}");
        };
}