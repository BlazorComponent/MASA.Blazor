<style>
    .item {
        margin: 5px;
        padding: 0.75rem 1.25rem;
        margin-bottom: -1px;
        border: 1px solid rgba(0,0,0,.125);
    }
</style>

<MButtonGroup>
    <MButton OnClick=Add>添加</MButton>
    <MButton OnClick=Del>删除</MButton>
    <MButton OnClick=Refresh>刷新</MButton>
</MButtonGroup>

<MDragZone OnConfigure=SetOptions @ref=mDragZone OnInit="AddList">
    <MDragItem>
        <MCard Class="item">
            <MCardTitle>item1.1</MCardTitle>
            <MCardText>item content1</MCardText>
            <MButton OnClick=@(()=>{ this.StateHasChanged(); })> button</MButton>
        </MCard>
    </MDragItem>
    <MDragItem>
        <MCard Class="item">
            <MCardTitle>item1.2</MCardTitle>
            <MCardText>item content2</MCardText>
        </MCard>
    </MDragItem>
</MDragZone>

@code {
    private MDragZone mDragZone;
    private int i = 1;

    private void SetOptions(SorttableOptions options)
    {
        options.Group = "group_item";
    }

    private void Add()
    {
        mDragZone.Add(Add(mDragZone, i++));
    }

    private void Del()
    {
        mDragZone.Add(Add(mDragZone, i++));
    }

    private void Refresh()
    {

    }


    private MDragItem Add(MDragZone container, int i)
    {
        return new MDragItem
            {
                DragZone = container,
                ChildContent = CreateCard("-", i++)
            };
    }

    private void AddList(MDragZone container)
    {
        int count = 5;
        var list = new List<MDragItem>();
        do
        {
            list.Add(new MDragItem
                {
                    DragZone = container,
                    ChildContent = CreateCard("-", i++)
                });
        }
        while (count - i > 0);
        if (list.Any())
            container.AddRange(list);
    }

    private RenderFragment CreateCard(string split, int index) => builder =>
        {
            int i = 0;
            builder.OpenComponent<MCard>(i++);
            builder.AddAttribute(i++, "IsDark", mDragZone.IsDark);
            builder.AddAttribute(i++, "Class", "item");
            builder.AddAttribute(i++, "ChildContent", CreateComponent("-", index));
            builder.CloseComponent();
        };

    private RenderFragment CreateComponent(string split, int index) => builder =>
        {
            int i = 0;
            builder.OpenComponent<MCardTitle>(i++);
            builder.AddAttribute(i++, "ChildContent", CreateText($"item card title {split}{index}"));
            builder.CloseComponent();

            builder.OpenComponent<MCardText>(i++);
            builder.AddAttribute(i++, "ChildContent", CreateText($"item card text {split}{index}"));
            builder.CloseComponent();

            //builder.OpenComponent<MButton>(i++);
            //builder.AddAttribute(i++, "ChildContent", CreateText($"item card button {split}{index}"));
            //builder.AddAttribute(i++, "OnClick",  async (MouseEventArgs e) =>{StateHasChanged(); await Task.CompletedTask;});
            //builder.CloseComponent();
        };

    private RenderFragment CreateText(string name) => builder =>
        {
            builder.AddContent(0, $"{name}");
        };
}